name: build

# Adapted from: https://github.com/tancheng/mlir-cgra/blob/main/.github/workflows/main.yml

on:
  push:
    branches: [ "ci-setup" ]
  pull_request:
    branches: [ "ci-setup" ]


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  LLVM_COMMIT: 339a7687e1c036a5f91c9d5391523b93e2e76cd3

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9.16"]

    steps:
    - uses: actions/checkout@v3
    
    # install transformers and specific versions of torch and torch-mlir
    - name: install dependencies
      working-directory: ${{github.workspace}}
      run: |
        sudo apt-get install python3.9 python3.9-dev
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python3.9 get-pip.py
        # pip3.9 --version
        # pip3.9 install transformers
        
        # wget https://github.com/llvm/torch-mlir/releases/download/snapshot-20221015.627/torch-1.14.0.dev20221014+cpu-cp39-cp39-linux_x86_64.whl
        # wget https://github.com/llvm/torch-mlir/releases/download/snapshot-20221015.627/torch_mlir-20221015.627-cp39-cp39-linux_x86_64.whl

        # pip3.9 install torch-1.14.0.dev20221014+cpu-cp39-cp39-linux_x86_64.whl
        # pip3.9 install torch_mlir-20221015.627-cp39-cp39-linux_x86_64.whl
        
    # install ninja
    - name: install ninja for LLVM build
      run: sudo apt-get install ninja-build
    
    # setup LLVM
    - name: install a specific version of LLVM
      working-directory: ${{github.workspace}}
      run: |
        mkdir -p /tmp/src/ && cd /tmp/src
        git init llvm-project
        cd /tmp/src/llvm-project
        git remote add origin https://github.com/llvm/llvm-project.git
        git fetch --depth=1 origin $LLVM_COMMIT
        git reset --hard $LLVM_COMMIT
        pip3.9 install -r ./mlir/python/requirements.txt

        export LLVM_SRC_DIR="/tmp/src/llvm-project"
        export LLVM_BUILD_DIR="/builds/llvm-project/build"
        export LLVM_INSTALL_DIR="/installs/llvm-project/install"
        cmake -GNinja  \
          "-H$LLVM_SRC_DIR/llvm" \
          "-B$LLVM_BUILD_DIR" \
          -DCMAKE_INSTALL_PREFIX=$LLVM_INSTALL_DIR  \
          -DLLVM_ENABLE_PROJECTS=mlir \
          -DLLVM_TARGETS_TO_BUILD="host" \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_INSTALL_UTILS=ON \
          -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
          -DLLVM_ENABLE_ASSERTIONS=OFF \
          -DLLVM_BUILD_EXAMPLES=OFF 

        cmake --build $LLVM_BUILD_DIR --target opt mlir-opt mlir-translate mlir-cpu-runner install -j $(nproc)
        
    # setup soda-opt
    - name: setup soda-opt
      working-directory: ${{github.workspace}}
      run: |
        export SODA_OPT_SOURCE_DIR="${{github.workspace}}"
        export SODA_OPT_BUILD_DIR="/builds/soda-opt/build"
        export SODA_OPT_INSTALL_DIR="/installs/soda-opt/install"

        cmake -GNinja \
          "-H$SODA_OPT_SOURCE_DIR" \
          "-B$SODA_OPT_BUILD_DIR" \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_EXTERNAL_LIT=$LLVM_BUILD_DIR/bin/llvm-lit \
          -DMLIR_DIR=$LLVM_INSTALL_DIR/lib/cmake/mlir \
          -DLLVM_DIR=$LLVM_INSTALL_DIR/lib/cmake/llvm \
          -DMLIR_ENABLE_BINDINGS_PYTHON=ON

        cmake --build $SODA_OPT_BUILD_DIR --target check-soda -j $(nproc)
